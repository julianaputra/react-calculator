{"version":3,"sources":["Display.js","Button.js","App.js","serviceWorker.js","index.js"],"names":["Result","className","this","props","quest","result","Component","Button","name","onClick","e","target","App","button","calculate","reset","backspace","state","includes","setState","evaluate","slice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6699faac.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport './Display.css'\r\n\r\nclass Result extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"display\">\r\n                <p className=\"quest\">{this.props.quest}</p>\r\n                <h2 className=\"result\">{this.props.result}</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Result","import React, {Component} from 'react'\r\nimport './Button.css'\r\n\r\nclass Button extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"button\">\r\n                <button name=\"C\" className=\"orange\" onClick={e => this.props.onClick(e.target.name)}>C</button>\r\n                <button name=\"CE\" className=\"orange\" onClick={e => this.props.onClick(e.target.name)}>CE</button>\r\n                <button name=\"(\" className=\"orange\" onClick={e => this.props.onClick(e.target.name)}>(</button>\r\n                <button name=\")\" className=\"orange\" onClick={e => this.props.onClick(e.target.name)}>)</button>\r\n                <br/>\r\n                <button name=\"7\" onClick={e => this.props.onClick(e.target.name)} >7</button>\r\n                <button name=\"8\" onClick={e => this.props.onClick(e.target.name)} >8</button>\r\n                <button name=\"9\" onClick={e => this.props.onClick(e.target.name)} >9</button>\r\n                <button name=\"*\" className=\"orange\" onClick={e => this.props.onClick(e.target.name)} >x</button>\r\n                <br/>\r\n                <button name=\"4\" onClick={e => this.props.onClick(e.target.name)} >4</button>\r\n                <button name=\"5\" onClick={e => this.props.onClick(e.target.name)} >5</button>\r\n                <button name=\"6\" onClick={e => this.props.onClick(e.target.name)} >6</button>\r\n                <button name=\"-\" className=\"orange\" onClick={e => this.props.onClick(e.target.name)} >-</button>\r\n                <br/>\r\n                <button name=\"1\" onClick={e => this.props.onClick(e.target.name)} >1</button>\r\n                <button name=\"2\" onClick={e => this.props.onClick(e.target.name)} >2</button>\r\n                <button name=\"3\" onClick={e => this.props.onClick(e.target.name)} >3</button>\r\n                <button name=\"+\" className=\"orange\" onClick={e => this.props.onClick(e.target.name)} >+</button>\r\n                <br/>\r\n                <button name=\".\" onClick={e => this.props.onClick(e.target.name)} >.</button>\r\n                <button name=\"0\" onClick={e => this.props.onClick(e.target.name)} >0</button>\r\n                <button name=\"=\" className=\"orange-solid\" onClick={e => this.props.onClick(e.target.name)} >=</button>\r\n                <button name=\"/\" className=\"orange\" onClick={e => this.props.onClick(e.target.name)} >รท</button>\r\n                <br/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button","import React, {Component} from 'react';\nimport './App.css';\nimport Display from './Display'\nimport Button from './Button'\nimport {evaluate} from 'mathjs'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      quest: '',\n      result: ''\n    }\n  }\n\n  onClick = (button) => {\n    if(button === '='){\n      this.calculate()\n    }\n\n    else if(button === 'C'){\n      this.reset()\n    }\n\n    else if(button === 'CE'){\n      this.backspace()\n    }\n\n    else if(button === '.'){\n      if(!this.state.result.includes('.')){\n        this.setState({\n          result: this.state.result + button\n        })\n      }\n    }\n\n    else {\n      this.setState({\n        result: this.state.result + button\n      })\n    }\n  }\n\n  calculate = () =>{\n    try{\n      this.setState({\n        quest: this.state.result,\n        result: evaluate(this.state.result) + ''\n      })\n    } catch(e) {\n      this.setState({\n        result: 'error'\n      })\n    }\n  }\n\n  reset = () =>{\n    this.setState({\n      quest: '',\n      result: ''\n    })\n  }\n\n  backspace = () =>{\n    this.setState({\n      result: this.state.result.slice(0,-1)\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n          <Display result={this.state.result} quest={this.state.quest}/>\n          <Button onClick={this.onClick} result={this.state.result}/>\n      </div>\n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}